# Application Configuration
quarkus.application.name=vortex-authorization-service
quarkus.http.port=8081

# CORS Configuration
quarkus.http.cors=true
quarkus.http.cors.origins=http://localhost:3001,http://localhost:5173,http://localhost:4173
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.methods=GET,POST,PUT,DELETE,OPTIONS

# Database Configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USER:vortex_auth}
quarkus.datasource.password=${DB_PASSWORD:vortex_auth_password}
quarkus.datasource.jdbc.url=${DB_URL:jdbc:postgresql://localhost:5432/vortex_auth}
quarkus.datasource.jdbc.max-size=20
quarkus.datasource.jdbc.min-size=5

# Hibernate ORM
quarkus.hibernate-orm.database.generation=none
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.log.format-sql=true
quarkus.hibernate-orm.physical-naming-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

# Flyway Migration
quarkus.flyway.migrate-at-start=true
quarkus.flyway.schemas=auth
quarkus.flyway.create-schemas=true
quarkus.flyway.locations=classpath:db/migration

# JWT Configuration
mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem
mp.jwt.verify.issuer=${AUTH_JWT_ISSUER:vortex-auth-service}
smallrye.jwt.sign.key.location=META-INF/resources/privateKey.pem

# Password Policy
auth.password.min-length=${AUTH_PASSWORD_MIN_LENGTH:8}
auth.password.max-length=${AUTH_PASSWORD_MAX_LENGTH:128}
auth.password.require-uppercase=${AUTH_PASSWORD_REQUIRE_UPPERCASE:true}
auth.password.require-lowercase=${AUTH_PASSWORD_REQUIRE_LOWERCASE:true}
auth.password.require-numbers=${AUTH_PASSWORD_REQUIRE_NUMBERS:true}
auth.password.require-special-chars=${AUTH_PASSWORD_REQUIRE_SPECIAL_CHARS:true}
auth.password.special-chars=${AUTH_PASSWORD_SPECIAL_CHARS:!@#$%^&*()_+-=[]{}|;:,.<>?}

# JWT Configuration
auth.jwt.secret=${JWT_SECRET:your-secret-key-here}
auth.jwt.access-token-expiration=${AUTH_JWT_ACCESS_TOKEN_EXPIRATION:15m}
auth.jwt.refresh-token-expiration=${AUTH_JWT_REFRESH_TOKEN_EXPIRATION:7d}
auth.jwt.issuer=${AUTH_JWT_ISSUER:vortex-auth-service}

# Rate Limiting
auth.rate-limit.login-attempts=${AUTH_RATE_LIMIT_LOGIN_ATTEMPTS:5}
auth.rate-limit.window-minutes=${AUTH_RATE_LIMIT_WINDOW_MINUTES:15}
auth.rate-limit.lockout-minutes=${AUTH_RATE_LIMIT_LOCKOUT_MINUTES:30}

# Email Configuration
quarkus.mailer.from=${AUTH_EMAIL_FROM:noreply@vortex.com}
auth.email.reset-token-expiration=${AUTH_EMAIL_RESET_TOKEN_EXPIRATION:1h}

# Development Configuration
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/vortex_auth
%dev.quarkus.datasource.username=vortex_auth
%dev.quarkus.datasource.password=vortex_auth_password
%dev.quarkus.hibernate-orm.log.sql=true
%dev.quarkus.log.level=INFO
%dev.quarkus.log.category."br.com.vortex.authorization".level=DEBUG
%dev.quarkus.kafka.devservices.enabled=false
%dev.quarkus.rabbitmq.devservices.enabled=false

# Test Configuration
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1
%test.quarkus.datasource.username=sa
%test.quarkus.datasource.password=
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.flyway.migrate-at-start=false

# Health checks
quarkus.health.openapi.included=true

# OpenAPI/Swagger
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/q/swagger-ui
mp.openapi.extensions.smallrye.info.title=Vortex Authorization Service API
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Authentication and authorization service for Vortex system

# Logging
quarkus.log.level=INFO
quarkus.log.category."br.com.vortex.authorization".level=DEBUG

# Messaging Configuration - Disabled for development
# To enable messaging, use profile -Dquarkus.profile=kafka or -Dquarkus.profile=rabbitmq
# mp.messaging.outgoing.user-events.connector=smallrye-in-memory
# mp.messaging.outgoing.user-events.merge=true

# Kafka Configuration Profile
%kafka.mp.messaging.outgoing.user-events.connector=smallrye-kafka
%kafka.mp.messaging.outgoing.user-events.topic=vortex-user-events
%kafka.mp.messaging.outgoing.user-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer
%kafka.mp.messaging.outgoing.user-events.key.serializer=org.apache.kafka.common.serialization.StringSerializer
%kafka.kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
%kafka.kafka.client.id=vortex-auth-service
%kafka.kafka.acks=1
%kafka.kafka.retries=3
%kafka.kafka.enable.idempotence=true

# RabbitMQ Configuration Profile
%rabbitmq.mp.messaging.outgoing.user-events.connector=smallrye-rabbitmq
%rabbitmq.mp.messaging.outgoing.user-events.exchange.name=vortex.user.events
%rabbitmq.mp.messaging.outgoing.user-events.exchange.type=topic
%rabbitmq.mp.messaging.outgoing.user-events.routing-key=user.auth.${auth.event.routing-key:all}
%rabbitmq.mp.messaging.outgoing.user-events.exchange.durable=true
%rabbitmq.rabbitmq-host=${RABBITMQ_HOST:localhost}
%rabbitmq.rabbitmq-port=${RABBITMQ_PORT:5672}
%rabbitmq.rabbitmq-username=${RABBITMQ_USERNAME:vortex}
%rabbitmq.rabbitmq-password=${RABBITMQ_PASSWORD:vortex123}
%rabbitmq.rabbitmq-virtual-host=${RABBITMQ_VHOST:/}

# Event Configuration
auth.event.routing-key=${AUTH_EVENT_ROUTING_KEY:auth}
auth.event.enabled=${AUTH_EVENT_ENABLED:false}